





## The functions are use to calculate the inverse of a square matrix in a time-efficient way. 
## They cache the value of the inverse the first time it is calculated, so it can be retrieved for 
## subsequent calculations. 

## The first function, `makeCacheMatrix` creates a list that contains the functions to:
## 1.  set the value of the matrix
## 2.  get the value of the matrix
## 3.  set the value of the inverse matrix
## 4.  get the value of the inverse matrix 

makeCacheMatrix <- function(x = matrix()) {
    i <- NULL
    set <- function(y) {
        x <<- y
        i <<- NULL
    }
    get <- function() x
    setinv <- function(solve) i <<- solve
    getinv <- function() i
    list(set = set, get = get,
         setinv = setinv,
         getinv = getinv)
}




## The functions checks if the inverse of the matrix has been previously calculated 
## and is cached. If so, it returns the cahed value, if not, it it calculates the inverse of the matrix

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
    ##print(x)
    #m <- makeCacheMatrix(x)
    m <- x
    i <- m$getinv()
    if(!is.null(i)) {
        message("getting cached data")
        return(i)
    }
    data <- m$get()
    i <- solve(data, ...)
    m$setinv(i)
    i
}


